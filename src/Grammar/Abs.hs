-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Grammar.

module Grammar.Abs where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = Program a [ProgComp' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ProgComp = ProgComp' BNFC'Position
data ProgComp' a
    = FunDecl a (Type' a) Ident [Arg' a] (Block' a)
    | VarDecl a (Type' a) [Item' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = ValArg a (Type' a) Ident | RefArg a (Type' a) Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Item = Item' BNFC'Position
data Item' a = NoInit a Ident | Init a Ident (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = Block a [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = Empty a
    | StmtBlock a (Block' a)
    | StmtComp a (ProgComp' a)
    | Assign a Ident (Expr' a)
    | StmtExp a (Expr' a)
    | Print a (Expr' a)
    | Ret a (Expr' a)
    | VRet a
    | If a (Expr' a) (Block' a)
    | IfElse a (Expr' a) (Block' a) (Block' a)
    | While a (Expr' a) (Block' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = Int a | Str a | Bool a | Void a | Fun a [ArgType' a] (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ArgType = ArgType' BNFC'Position
data ArgType' a = ValArgType a (Type' a) | RefArgType a (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = EVar a Ident
    | EInt a Integer
    | ETrue a
    | EFalse a
    | EString a String
    | ELambda a [Arg' a] (Type' a) (Block' a)
    | Incr a Ident
    | Decr a Ident
    | EApplic a Ident [Expr' a]
    | ENeg a (Expr' a)
    | ENot a (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = Less a | LEQ a | Greater a | GEQ a | EQU a | NEQ a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Program p _ -> p

instance HasPosition ProgComp where
  hasPosition = \case
    FunDecl p _ _ _ _ -> p
    VarDecl p _ _ -> p

instance HasPosition Arg where
  hasPosition = \case
    ValArg p _ _ -> p
    RefArg p _ _ -> p

instance HasPosition Item where
  hasPosition = \case
    NoInit p _ -> p
    Init p _ _ -> p

instance HasPosition Block where
  hasPosition = \case
    Block p _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    Empty p -> p
    StmtBlock p _ -> p
    StmtComp p _ -> p
    Assign p _ _ -> p
    StmtExp p _ -> p
    Print p _ -> p
    Ret p _ -> p
    VRet p -> p
    If p _ _ -> p
    IfElse p _ _ _ -> p
    While p _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    Int p -> p
    Str p -> p
    Bool p -> p
    Void p -> p
    Fun p _ _ -> p

instance HasPosition ArgType where
  hasPosition = \case
    ValArgType p _ -> p
    RefArgType p _ -> p

instance HasPosition Expr where
  hasPosition = \case
    EVar p _ -> p
    EInt p _ -> p
    ETrue p -> p
    EFalse p -> p
    EString p _ -> p
    ELambda p _ _ _ -> p
    Incr p _ -> p
    Decr p _ -> p
    EApplic p _ _ -> p
    ENeg p _ -> p
    ENot p _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p
    EAnd p _ _ -> p
    EOr p _ _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    Less p -> p
    LEQ p -> p
    Greater p -> p
    GEQ p -> p
    EQU p -> p
    NEQ p -> p

